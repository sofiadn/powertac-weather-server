"""
Generates random values for given reports according to the DELTAS.
The deltas can be generated by create_forecast_deltas.py.
"""

from datetime import datetime, timedelta
import pymysql as MySQLdb
import random


LOCATION   = "rotterdam"
START_DATE = "20090101" # YYYYMMDD of earliest report
END_DATE   = "20111231" # YYYYMMDD of last report

DB_db    = "localhost"
DB_table = "powertac_weather"
DB_user  = "powertac"
DB_pass  = "password"

DELTAS = [
    0.5162049085865681,
    0.5001617542505696,
    0.4895374321040051,
    0.4133156231642960,
    0.4254929262239113,
    0.4185106291938654,
    0.3936224626324226,
    0.3592021873751825,
    0.4227455362185202,
    0.2889786621257507,
    0.2990803149973352,
    0.2980053411248858,
    0.3278548743792022,
    0.3268537591678519,
    0.2222389153440853,
    0.2147271278862675,
    0.2271812561709724,
    0.2188789204055356,
    0.2534842863405704,
    0.1943563797606358,
    0.1769833979598591,
    0.1811455527733305,
    0.1341968742628301,
    0.1580705552864369,
]


def main():
    """Very inefficient, but who cares, we only need to run this once
    """

    con = MySQLdb.connect(DB_db, DB_user, DB_pass, DB_table)
    cur = con.cursor()

    end_date = datetime.strptime(END_DATE, "%Y%m%d")
    origin = datetime.strptime(START_DATE, "%Y%m%d")

    select = "SELECT temp, windSpeed, windDir, cloudCover "\
        "FROM reports "\
        "WHERE location='%s' AND weatherDate='%s';"
    
    insert = "INSERT INTO forecasts "\
        "(weatherDate,origin,location,temp,windSpeed,windDir,cloudCover) "\
        "VALUES ('%s', '%s', '%s', %s, %s, %s, %s);"

    all_taus_temp  = [0] * 24
    all_taus_speed = [0] * 24
    all_taus_dir   = [0] * 24
    all_taus_cloud = [0] * 24
    all_taus_total = 0

    while origin < end_date:
        taus_temp  = [0] * 24
        taus_speed = [0] * 24
        taus_dir   = [0] * 24
        taus_cloud = [0] * 24
        
        weather = {}
        for i in range(48):
            date = origin + timedelta(hours=i+1)
            cur.execute(select % (LOCATION, date))
            weather[date] = cur.fetchone()

        for i in range(24):
            taus_temp[i]  = taus_temp[i-1]  + random.gauss(0, DELTAS[i])
            taus_speed[i] = taus_speed[i-1] + random.gauss(0, DELTAS[i])
            taus_dir[i]   = taus_dir[i-1]   + random.gauss(0, DELTAS[i])
            taus_cloud[i] = taus_cloud[i-1] + random.gauss(0, DELTAS[i])

            all_taus_temp [i] += taus_temp [i]
            all_taus_speed[i] += taus_speed[i]
            all_taus_dir  [i] += taus_dir  [i]
            all_taus_cloud[i] += taus_cloud[i]
            all_taus_total += 1

        for i in range(24):
            weather_date = origin + timedelta(hours=i)

            for j in range(24):
                forecast_date = weather_date + timedelta(hours=j+1)

                try:
                    temp  = weather[forecast_date][0] + 2 *    taus_temp [j]
                    speed = weather[forecast_date][1] +        taus_speed[j]
                    dir   = weather[forecast_date][2] + 10 *   taus_dir  [j]
                    cloud = weather[forecast_date][3] + 0.1 *  taus_cloud[j]

                    speed = max(min(speed, 19), 0)
                    dir   = int((dir) % 360)
                    cloud = max(min(cloud, 1), 0)

                    sql = insert % (forecast_date, weather_date, LOCATION, 
                                    temp, speed, dir, cloud)
                    cur.execute(sql)
                except Exception as e:
                    print
                    print(e)
                    print(sql)
            
            con.commit()

        origin += timedelta(days=1)

    con.close()

    print("Average errors")
    print("temp  speed dir   cloud")
    for i in range(24):
        temp  = "%.1f" % (all_taus_temp [i] / all_taus_total)
        speed = "%.1f" % (all_taus_speed[i] / all_taus_total)
        dir   = "%.1f" % (all_taus_dir  [i] / all_taus_total)
        cloud = "%.1f" % (all_taus_cloud[i] / all_taus_total)

        print ("%s %s %s %s" % (
                temp. rjust(6, ' '),
                speed.rjust(6, ' '),
                dir.  rjust(6, ' '),    
                cloud.rjust(6, ' ')))


if __name__ == "__main__":
    main()
